<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Tutorials on 随记 | note to Think</title>
        <link>https://62742a40.github.io/training/</link>
        <description>Recent content in Tutorials on 随记 | note to Think</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Sat, 04 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://62742a40.github.io/training/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>web assembly初探</title>
        <link>https://62742a40.github.io/training/a-scratch-of-webassembly/</link>
        <pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>https://62742a40.github.io/training/a-scratch-of-webassembly/</guid>
        <description>&lt;img src="https://s.md3.cn/imgs/i/2023/11/14/65525141e7c75.jpg" alt="Featured image of post web assembly初探" /&gt;&lt;style type=&#34;text/css&#34;&gt;.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}&lt;/style&gt;
&lt;div&gt;&lt;svg width=&#34;0&#34; height=&#34;0&#34; display=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;symbol id=&#34;tip-notice&#34; viewBox=&#34;0 0 512 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z&#34;/&gt;&lt;/symbol&gt;&lt;symbol id=&#34;note-notice&#34; viewBox=&#34;0 0 512 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z&#34;/&gt;&lt;/symbol&gt;&lt;symbol id=&#34;warning-notice&#34; viewBox=&#34;0 0 576 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z&#34;/&gt;&lt;/symbol&gt;&lt;symbol id=&#34;info-notice&#34; viewBox=&#34;0 0 512 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z&#34;/&gt;&lt;/symbol&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&#34;notice warning&#34; &gt;
&lt;p class=&#34;first notice-title&#34;&gt;&lt;span class=&#34;icon-notice baseline&#34;&gt;&lt;svg&gt;&lt;use href=&#34;#warning-notice&#34;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/span&gt;Warning&lt;/p&gt;&lt;p&gt;&amp;ldquo;本页面可能的刷新慢问题&amp;rdquo;
使用webassembly技术生成的富文本包含的js和wasm资源可能会由于服务器下载速度限制出现加载慢问题，如果刷新慢请耐心等待，如果显示空白错误请重新刷新尝试&lt;/p&gt;&lt;/div&gt;

&lt;h2 id=&#34;写在前面&#34;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;最早接触这个词时候大概是2020年左右，当时在某个网站上看到了基于网页跑的xp系统，感觉还挺新奇。最近重学cv课程，想着这次一定要实现一些算法。为了在网页演示基于C、C++、Rust、WebGL实现的图像处理算法，故而啃啃该技术的一些基本用法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：Firefox 52+ 和 Chrome 57+ 和最新版本的 Opera 已经默认启用，你也可以在 Firefox 47+ 中通过在 about:config 页面启用 javascript.options.wasm 字段获得支持，Chrome 51+ 和 Opera 38+ 可以在 chrome://flags 页面启用 Experimental WebAssembly 选项以支持 WebAssembly&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一例比较简单，就是将一个基于c的printf函数的命令行模式程序编译到web assembly。
&lt;iframe loading=&#34;lazy&#34; src=&#34;https://s.md3.cn/dl/cdn/../wasm/hello-WebAssembly/hello2.html&#34;
    style=&#34;overflow:hidden&#34; scrolling=&#34;no&#34; width=&#34;100%&#34; height=&#34;100%&#34; marginheight=&#34;0&#34;
    frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;第二例是一个斐波那契数列生成器，使用c函数实现生成，js读取返回值
&lt;iframe loading=&#34;lazy&#34; src=&#34;https://s.md3.cn/dl/cdn/../wasm/hello-WebAssembly/fib.html&#34;
    style=&#34;overflow:hidden&#34; scrolling=&#34;no&#34; width=&#34;100%&#34; height=&#34;100%&#34; marginheight=&#34;0&#34;
    frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;第三例是一个使用OpenGL实现的canvas功能的例子，渲染为120帧
&lt;iframe loading=&#34;lazy&#34; src=&#34;https://s.md3.cn/dl/cdn/../wasm/hello-WebAssembly/floating_rects.html&#34;
    style=&#34;overflow:hidden&#34; scrolling=&#34;no&#34; width=&#34;100%&#34; height=&#34;100%&#34; marginheight=&#34;0&#34;
    frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;上面的demo借鉴了以下的几个文章或者代码：&lt;/p&gt;
&lt;p&gt;[1]. &lt;a class=&#34;link&#34; href=&#34;https://github.com/timhutton/sdl-canvas-wasm.git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/timhutton/sdl-canvas-wasm.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2]. &lt;a class=&#34;link&#34; href=&#34;https://go.opensl.life/X9pS8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://go.opensl.life/X9pS8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3]. &lt;a class=&#34;link&#34; href=&#34;https://go.opensl.life/mfrfW&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://go.opensl.life/mfrfW&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4]. &lt;a class=&#34;link&#34; href=&#34;https://go.opensl.life/12WYb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://go.opensl.life/12WYb&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>git使用问题记录</title>
        <link>https://62742a40.github.io/training/note-of-git/</link>
        <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>https://62742a40.github.io/training/note-of-git/</guid>
        <description>&lt;h2 id=&#34;ubuntu下出现git-log-外文正常显示中文显示乱码的问题&#34;&gt;ubuntu下出现git log 外文正常显示、中文显示乱码的问题&lt;/h2&gt;
&lt;p&gt;描述：&lt;/p&gt;
&lt;p&gt;中文显示位尖括号 &lt;code&gt;&amp;lt;E4&amp;gt;&amp;lt;B8&amp;gt;&amp;lt;B4&amp;gt;&amp;lt;E6&amp;gt;&amp;lt;97&amp;gt;&amp;lt;B6&amp;gt;&amp;lt;E4&amp;gt;&amp;lt;BF&amp;gt;&amp;lt;9D&amp;gt;&amp;lt;E5&amp;gt;&amp;lt;AD&amp;gt;&amp;lt;98&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global i18n.commitencoding utf-8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global i18n.logoutputencoding gbk
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export LESSCHARSET&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf-8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;git status时也会出现类似问题，但导致原因却不相同，可使用下面命令解决&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global core.quotepath false
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;跨系统基于挂载文件开发时常出现提交后在另一系统上仍然存在多个未提交&#34;&gt;跨系统基于挂载文件开发时常出现提交后，在另一系统上仍然存在多个未提交&lt;/h2&gt;
&lt;p&gt;描述：&lt;/p&gt;
&lt;p&gt;在多个系统间本地开发时，使用挂载目录进行编码、提交分离时，常常出现在一端提交，而另一端vs code提示多个未添加的变更，这常常是不同系统间filemode差异&lt;/p&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --add core.filemode false
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>服务器配置备忘录</title>
        <link>https://62742a40.github.io/training/server-setting/</link>
        <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
        
        <guid>https://62742a40.github.io/training/server-setting/</guid>
        <description>&lt;img src="https://s.md3.cn/imgs/i/2023/11/13/6552429aa90ef.jpg" alt="Featured image of post 服务器配置备忘录" /&gt;&lt;p&gt;写这篇文章的目的是我有个囤服务器的坏毛病，服务器越来越多，每次配置服务器总是有一些重复的步骤，这里将它们记录下来，以备下次使用。&lt;/p&gt;
&lt;p&gt;（最近心水了Ansible这个工具，不过还没学会，所以这个教程还是用得上的）&lt;/p&gt;
&lt;h2 id=&#34;centos新建用户并赋予sudo权限&#34;&gt;Centos新建用户并赋予SUDO权限&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nusername&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;newuser
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;useradd -m -s /bin/bash $nusername
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo usermod -a -G wheel $nusername
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;passwd $nusername
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;centos防火墙配置&#34;&gt;Centos防火墙配置&lt;/h2&gt;
&lt;p&gt;防火墙配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo yum install firewalld
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo firewall-cmd --state &lt;span style=&#34;color:#75715e&#34;&gt;#防火墙状态 running &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl start firewalld
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl enable firewalld
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开端口
上面说明都是通过服务的配置文件打开端口，但是有时候不是所有服务都带有配置文件。在这种情况下，您有两种选择。您可以打开指定的端口，也可以定义新的FirewallD服务。&lt;/p&gt;
&lt;p&gt;例如，Plex服务器监听TCP协议32400端口，可使用&amp;ndash;add-port=选项在当前会话的public区域中打开32400端口。&lt;/p&gt;
&lt;p&gt;协议可以是tcp或udp。要验证是否已成功添加32400端口，请使用&amp;ndash;list-ports选项列出已打开的端口。&lt;/p&gt;
&lt;p&gt;要在重新启动后使端口32400保持打开状态，请使用&amp;ndash;permanent选项运行相同的命令，将规则添加到配置文件中。&lt;/p&gt;
&lt;p&gt;删除端口规则的语法与添加端口时的语法相同。只需使用&amp;ndash;remove-port选项即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;public --add-port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;32400/tcp &lt;span style=&#34;color:#75715e&#34;&gt;#打开端口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;public --list-ports &lt;span style=&#34;color:#75715e&#34;&gt;#列出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;public --remove-port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;32400/tcp &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考链接：
[1]. &lt;a class=&#34;link&#34; href=&#34;https://go.opensl.life/gV4IY&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://go.opensl.life/gV4IY&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>容器中的root用户和密码</title>
        <link>https://62742a40.github.io/training/non-root-container-guide/</link>
        <pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate>
        
        <guid>https://62742a40.github.io/training/non-root-container-guide/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.baeldung.com/ops/root-user-password-docker-container&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;本文翻译于 &amp;ldquo;Root User and Password Inside a Docker Container&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们常使用root权限打开docker容器，显然这存在着一定的安全性问题。本文将讨论如何使用non-root用户创建docker镜像，来确保一些资源的安全性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Docker&#34; data-lang=&#34;Docker&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ubuntu:16.04&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt-get update &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; useradd -m john&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;USER&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; john&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CMD&lt;/span&gt; /bin/bash&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的例子创建了一个非root用户的镜像，正常启动后，进入容器即以john用户身份登录，此时使用包管理器安装软件包则会报出权限不足错误，需要切换至root用户。当你在烦恼切换时提示需要你输入root账户的密码时，有一个简单的方式可以直接以root方式登陆，那就是使用下面的命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker exec -it -u &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; container_name bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然你也可以使用下面的命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker exec -it -u root container_name bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果说，你一定要在容器中为非root用户指定特别权限，你也可以安装sudo命令。下面的例子创建了一个非root用户john，并授予其sudo权限&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Docker&#34; data-lang=&#34;Docker&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ubuntu:16.04&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get -y install sudo&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; useradd -m john &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;john:john&amp;#34;&lt;/span&gt; | chpasswd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser john sudo&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;USER&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; john&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CMD&lt;/span&gt; /bin/bash&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>ml Ensembles Methods</title>
        <link>https://62742a40.github.io/training/ensemble-learning/</link>
        <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://62742a40.github.io/training/ensemble-learning/</guid>
        <description>&lt;img src="https://s.md3.cn/imgs/i/2023/11/13/6552429483e37.jpg" alt="Featured image of post ml Ensembles Methods" /&gt;&lt;h2 id=&#34;集成学习总结&#34;&gt;集成学习总结&lt;/h2&gt;
&lt;p&gt;本文译自&lt;a class=&#34;link&#34; href=&#34;https://github.com/Davisy/ML-Ensembles-Methods&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ML-Ensembles-Methods&lt;/a&gt;
  集成方法的目标是将具有给定学习算法构建的几个基本estimator的预测结果结合起来，以改善单个estimator上的泛化能力和鲁棒性。对于组合的机器学习技术，它结合了几个基础模型以产生一个最佳预测或者说集合是将各种学习者（不同模型）组合在一起的艺术，以即使模型的稳定性和预测能力得到调整。&lt;/p&gt;
&lt;h3 id=&#34;集合方法通常分为两类&#34;&gt;集合方法通常分为两类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;平均方法。其驱动原理是独立地建立几个估计量，然后对它们的预测进行平均。平均而言，由于其方差减小，组合估计通常比任何单一基估计都好。例子:Bagging方法，随机森林方法等。&lt;/li&gt;
&lt;li&gt;boosting方法，基本估计量是顺序建立的，每一个都试图减少组合估计量的偏差。其动机是将几个薄弱的模型组合成一个强大的集合。例如:AdaBoost，梯度树Boosting（GBDT, gradient boost decision tree）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;将来自不同模型的预测结合起来的三种最流行的方法是&#34;&gt;将来自不同模型的预测结合起来的三种最流行的方法是&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Bagging : 从训练数据集的不同子样本中构建多个模型(通常是相同类型的)。&lt;/li&gt;
&lt;li&gt;Boosting : 构建多个模型(通常是同一类型的)，其中每个模型都能学会修复链中先前模型的预测错误。&lt;/li&gt;
&lt;li&gt;Voting : 建立多个模型(通常是不同类型的)和简单的统计数据(如计算平均值)来组合预测。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;bagging-方法&#34;&gt;Bagging 方法&lt;/h2&gt;
&lt;p&gt;  自动聚合或Bagging，包括了：从你的训练数据集(带替换)中提取多个样本，并为每个样本训练一个模型。最终的输出预测是所有子模型预测的平均值。&lt;/p&gt;
&lt;h3 id=&#34;本节所述的三种bagging模型如下&#34;&gt;本节所述的三种bagging模型如下&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Bagged Decision Trees : Bagging决策树算法在具有高方差的算法中表现最好。一个流行的例子是决策树，通常在没有修剪的情况下构建&lt;/li&gt;
&lt;li&gt;Random Forest : 训练数据集的随机森林样本被替换，但是树的构造方式降低了单个分类器之间的相关性。具体来说，不是在树的构造中贪婪地选择最好的拆分点，而是在每次拆分时只考虑一个随机的特征子集。&lt;/li&gt;
&lt;li&gt;Extra Trees : Bagging的另一种修改，其中随机树是由训练数据集的样本构建的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bagging-方法使用实例&#34;&gt;bagging 方法使用实例&lt;/h3&gt;
&lt;iframe loading=&#34;lazy&#34; src=&#34;https://s.md3.cn/dl/cdn/blog/Bagging-Machine-Learning-Algorithm.html&#34; style=&#34;overflow:hidden&#34;
    scrolling=&#34;true&#34; width=&#34;100%&#34; height=&#34;1000px&#34; name=&#34;CHANGETHIS&#34; id=&#34;CHANGETHIS&#34; marginheight=&#34;0&#34;
    frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&#34;https://s.md3.cn/dl/cdn/blog/Bagging-Machine-Learning-Algorithm.html&#34;&gt;完整内容点击此连接查看&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;boosting-方法&#34;&gt;Boosting 方法&lt;/h2&gt;
&lt;p&gt;  增强集成算法创建了一系列模型，这些模型试图在序列中纠正之前的模型的错误。模型创建后，可以根据其被证明的准确性进行预测，并将结果组合起来创建最终的输出预测。&lt;/p&gt;
&lt;h3 id=&#34;两种最常见的boosting集成机器学习算法是&#34;&gt;两种最常见的boosting集成机器学习算法是&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;AdaBoost : AdaBoost可能是第一个成功的增强集成算法。它的工作原理通常是根据分类的难易程度对数据集中的实例进行加权，从而允许算法在构建后续模型时更多更少地关注这些实例。&lt;/li&gt;
&lt;li&gt;Stochastic Gradient Boosting(最好的) : 随机梯度增强(也称为梯度增强机)是最复杂的集成技术之一。这种技术也被证明可能是通过集成来提高性能的最佳技术之一&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
